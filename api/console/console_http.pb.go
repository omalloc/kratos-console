// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.2
// source: console/console.proto

package console

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	resource "github.com/omalloc/kratos-console/api/console/resource"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationConsoleCreateZone = "/api.console.Console/CreateZone"
const OperationConsoleDeleteZone = "/api.console.Console/DeleteZone"
const OperationConsoleDisableZone = "/api.console.Console/DisableZone"
const OperationConsoleGetZone = "/api.console.Console/GetZone"
const OperationConsoleGetZoneList = "/api.console.Console/GetZoneList"
const OperationConsoleUpdateZone = "/api.console.Console/UpdateZone"

type ConsoleHTTPServer interface {
	CreateZone(context.Context, *resource.CreateZoneRequest) (*resource.CreateZoneReply, error)
	DeleteZone(context.Context, *resource.DeleteZoneRequest) (*resource.DeleteZoneReply, error)
	DisableZone(context.Context, *resource.DisableZoneRequest) (*resource.DisableZoneReply, error)
	GetZone(context.Context, *resource.GetZoneRequest) (*resource.GetZoneReply, error)
	// GetZoneList GetZoneList returns a list of zones.
	//
	// The list is sorted by zone id.
	GetZoneList(context.Context, *resource.GetZoneListRequest) (*resource.GetZoneListReply, error)
	UpdateZone(context.Context, *resource.UpdateZoneRequest) (*resource.UpdateZoneReply, error)
}

func RegisterConsoleHTTPServer(s *http.Server, srv ConsoleHTTPServer) {
	r := s.Route("/")
	r.GET("/api/console/zone", _Console_GetZoneList0_HTTP_Handler(srv))
	r.GET("/api/console/zone/{id}", _Console_GetZone0_HTTP_Handler(srv))
	r.POST("/api/console/zone", _Console_CreateZone0_HTTP_Handler(srv))
	r.PUT("/api/console/zone/{id}", _Console_UpdateZone0_HTTP_Handler(srv))
	r.POST("/api/console/zone/{id}/disable", _Console_DisableZone0_HTTP_Handler(srv))
	r.DELETE("/api/console/zone/{id}", _Console_DeleteZone0_HTTP_Handler(srv))
}

func _Console_GetZoneList0_HTTP_Handler(srv ConsoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resource.GetZoneListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsoleGetZoneList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetZoneList(ctx, req.(*resource.GetZoneListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resource.GetZoneListReply)
		return ctx.Result(200, reply)
	}
}

func _Console_GetZone0_HTTP_Handler(srv ConsoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resource.GetZoneRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsoleGetZone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetZone(ctx, req.(*resource.GetZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resource.GetZoneReply)
		return ctx.Result(200, reply)
	}
}

func _Console_CreateZone0_HTTP_Handler(srv ConsoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resource.CreateZoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsoleCreateZone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateZone(ctx, req.(*resource.CreateZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resource.CreateZoneReply)
		return ctx.Result(200, reply)
	}
}

func _Console_UpdateZone0_HTTP_Handler(srv ConsoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resource.UpdateZoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsoleUpdateZone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateZone(ctx, req.(*resource.UpdateZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resource.UpdateZoneReply)
		return ctx.Result(200, reply)
	}
}

func _Console_DisableZone0_HTTP_Handler(srv ConsoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resource.DisableZoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsoleDisableZone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisableZone(ctx, req.(*resource.DisableZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resource.DisableZoneReply)
		return ctx.Result(200, reply)
	}
}

func _Console_DeleteZone0_HTTP_Handler(srv ConsoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resource.DeleteZoneRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsoleDeleteZone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteZone(ctx, req.(*resource.DeleteZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resource.DeleteZoneReply)
		return ctx.Result(200, reply)
	}
}

type ConsoleHTTPClient interface {
	CreateZone(ctx context.Context, req *resource.CreateZoneRequest, opts ...http.CallOption) (rsp *resource.CreateZoneReply, err error)
	DeleteZone(ctx context.Context, req *resource.DeleteZoneRequest, opts ...http.CallOption) (rsp *resource.DeleteZoneReply, err error)
	DisableZone(ctx context.Context, req *resource.DisableZoneRequest, opts ...http.CallOption) (rsp *resource.DisableZoneReply, err error)
	GetZone(ctx context.Context, req *resource.GetZoneRequest, opts ...http.CallOption) (rsp *resource.GetZoneReply, err error)
	GetZoneList(ctx context.Context, req *resource.GetZoneListRequest, opts ...http.CallOption) (rsp *resource.GetZoneListReply, err error)
	UpdateZone(ctx context.Context, req *resource.UpdateZoneRequest, opts ...http.CallOption) (rsp *resource.UpdateZoneReply, err error)
}

type ConsoleHTTPClientImpl struct {
	cc *http.Client
}

func NewConsoleHTTPClient(client *http.Client) ConsoleHTTPClient {
	return &ConsoleHTTPClientImpl{client}
}

func (c *ConsoleHTTPClientImpl) CreateZone(ctx context.Context, in *resource.CreateZoneRequest, opts ...http.CallOption) (*resource.CreateZoneReply, error) {
	var out resource.CreateZoneReply
	pattern := "/api/console/zone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConsoleCreateZone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConsoleHTTPClientImpl) DeleteZone(ctx context.Context, in *resource.DeleteZoneRequest, opts ...http.CallOption) (*resource.DeleteZoneReply, error) {
	var out resource.DeleteZoneReply
	pattern := "/api/console/zone/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsoleDeleteZone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConsoleHTTPClientImpl) DisableZone(ctx context.Context, in *resource.DisableZoneRequest, opts ...http.CallOption) (*resource.DisableZoneReply, error) {
	var out resource.DisableZoneReply
	pattern := "/api/console/zone/{id}/disable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConsoleDisableZone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConsoleHTTPClientImpl) GetZone(ctx context.Context, in *resource.GetZoneRequest, opts ...http.CallOption) (*resource.GetZoneReply, error) {
	var out resource.GetZoneReply
	pattern := "/api/console/zone/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsoleGetZone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConsoleHTTPClientImpl) GetZoneList(ctx context.Context, in *resource.GetZoneListRequest, opts ...http.CallOption) (*resource.GetZoneListReply, error) {
	var out resource.GetZoneListReply
	pattern := "/api/console/zone"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsoleGetZoneList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConsoleHTTPClientImpl) UpdateZone(ctx context.Context, in *resource.UpdateZoneRequest, opts ...http.CallOption) (*resource.UpdateZoneReply, error) {
	var out resource.UpdateZoneReply
	pattern := "/api/console/zone/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConsoleUpdateZone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
