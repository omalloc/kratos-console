// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v5.27.1
// source: console/resource/zone.proto

package resource

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationZoneCreate = "/api.console.resource.Zone/Create"
const OperationZoneDelete = "/api.console.resource.Zone/Delete"
const OperationZoneDisable = "/api.console.resource.Zone/Disable"
const OperationZoneGet = "/api.console.resource.Zone/Get"
const OperationZoneList = "/api.console.resource.Zone/List"
const OperationZoneSimpleList = "/api.console.resource.Zone/SimpleList"
const OperationZoneUpdate = "/api.console.resource.Zone/Update"

type ZoneHTTPServer interface {
	// Create Create creates a new zone.
	//
	// ...
	Create(context.Context, *CreateZoneRequest) (*CreateZoneReply, error)
	// Delete Delete deletes the zone.
	//
	// ...
	Delete(context.Context, *DeleteZoneRequest) (*DeleteZoneReply, error)
	// Disable Disable disables the zone.
	//
	// ...
	Disable(context.Context, *DisableZoneRequest) (*DisableZoneReply, error)
	// Get Get returns the zone.
	//
	// Query parameter "id" is required.
	// Example: /api/console/zone/1
	Get(context.Context, *GetZoneRequest) (*GetZoneReply, error)
	// List List returns a list of zones.
	//
	// The list is sorted by zone id.
	List(context.Context, *GetZoneListRequest) (*GetZoneListReply, error)
	// SimpleList SimpleList returns a simple-list of zones.
	//
	// The list is sorted by zone create time.
	SimpleList(context.Context, *SimpleListRequest) (*SimpleListReply, error)
	// Update Update updates the zone.
	//
	// ...
	Update(context.Context, *UpdateZoneRequest) (*UpdateZoneReply, error)
}

func RegisterZoneHTTPServer(s *http.Server, srv ZoneHTTPServer) {
	r := s.Route("/")
	r.GET("/api/console/zone", _Zone_List2_HTTP_Handler(srv))
	r.GET("/api/console/zone/simple", _Zone_SimpleList1_HTTP_Handler(srv))
	r.GET("/api/console/zone/{id}", _Zone_Get2_HTTP_Handler(srv))
	r.POST("/api/console/zone", _Zone_Create2_HTTP_Handler(srv))
	r.PUT("/api/console/zone/{id}", _Zone_Update2_HTTP_Handler(srv))
	r.POST("/api/console/zone/{id}/disable", _Zone_Disable0_HTTP_Handler(srv))
	r.DELETE("/api/console/zone/{id}", _Zone_Delete2_HTTP_Handler(srv))
}

func _Zone_List2_HTTP_Handler(srv ZoneHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetZoneListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationZoneList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*GetZoneListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetZoneListReply)
		return ctx.Result(200, reply)
	}
}

func _Zone_SimpleList1_HTTP_Handler(srv ZoneHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SimpleListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationZoneSimpleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SimpleList(ctx, req.(*SimpleListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SimpleListReply)
		return ctx.Result(200, reply)
	}
}

func _Zone_Get2_HTTP_Handler(srv ZoneHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetZoneRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationZoneGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetZoneReply)
		return ctx.Result(200, reply)
	}
}

func _Zone_Create2_HTTP_Handler(srv ZoneHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateZoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationZoneCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*CreateZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateZoneReply)
		return ctx.Result(200, reply)
	}
}

func _Zone_Update2_HTTP_Handler(srv ZoneHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateZoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationZoneUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*UpdateZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateZoneReply)
		return ctx.Result(200, reply)
	}
}

func _Zone_Disable0_HTTP_Handler(srv ZoneHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisableZoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationZoneDisable)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Disable(ctx, req.(*DisableZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DisableZoneReply)
		return ctx.Result(200, reply)
	}
}

func _Zone_Delete2_HTTP_Handler(srv ZoneHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteZoneRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationZoneDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*DeleteZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteZoneReply)
		return ctx.Result(200, reply)
	}
}

type ZoneHTTPClient interface {
	Create(ctx context.Context, req *CreateZoneRequest, opts ...http.CallOption) (rsp *CreateZoneReply, err error)
	Delete(ctx context.Context, req *DeleteZoneRequest, opts ...http.CallOption) (rsp *DeleteZoneReply, err error)
	Disable(ctx context.Context, req *DisableZoneRequest, opts ...http.CallOption) (rsp *DisableZoneReply, err error)
	Get(ctx context.Context, req *GetZoneRequest, opts ...http.CallOption) (rsp *GetZoneReply, err error)
	List(ctx context.Context, req *GetZoneListRequest, opts ...http.CallOption) (rsp *GetZoneListReply, err error)
	SimpleList(ctx context.Context, req *SimpleListRequest, opts ...http.CallOption) (rsp *SimpleListReply, err error)
	Update(ctx context.Context, req *UpdateZoneRequest, opts ...http.CallOption) (rsp *UpdateZoneReply, err error)
}

type ZoneHTTPClientImpl struct {
	cc *http.Client
}

func NewZoneHTTPClient(client *http.Client) ZoneHTTPClient {
	return &ZoneHTTPClientImpl{client}
}

func (c *ZoneHTTPClientImpl) Create(ctx context.Context, in *CreateZoneRequest, opts ...http.CallOption) (*CreateZoneReply, error) {
	var out CreateZoneReply
	pattern := "/api/console/zone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationZoneCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ZoneHTTPClientImpl) Delete(ctx context.Context, in *DeleteZoneRequest, opts ...http.CallOption) (*DeleteZoneReply, error) {
	var out DeleteZoneReply
	pattern := "/api/console/zone/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationZoneDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ZoneHTTPClientImpl) Disable(ctx context.Context, in *DisableZoneRequest, opts ...http.CallOption) (*DisableZoneReply, error) {
	var out DisableZoneReply
	pattern := "/api/console/zone/{id}/disable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationZoneDisable))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ZoneHTTPClientImpl) Get(ctx context.Context, in *GetZoneRequest, opts ...http.CallOption) (*GetZoneReply, error) {
	var out GetZoneReply
	pattern := "/api/console/zone/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationZoneGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ZoneHTTPClientImpl) List(ctx context.Context, in *GetZoneListRequest, opts ...http.CallOption) (*GetZoneListReply, error) {
	var out GetZoneListReply
	pattern := "/api/console/zone"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationZoneList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ZoneHTTPClientImpl) SimpleList(ctx context.Context, in *SimpleListRequest, opts ...http.CallOption) (*SimpleListReply, error) {
	var out SimpleListReply
	pattern := "/api/console/zone/simple"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationZoneSimpleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ZoneHTTPClientImpl) Update(ctx context.Context, in *UpdateZoneRequest, opts ...http.CallOption) (*UpdateZoneReply, error) {
	var out UpdateZoneReply
	pattern := "/api/console/zone/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationZoneUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
