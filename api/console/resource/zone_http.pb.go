// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.4
// source: console/resource/zone.proto

package resource

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationZoneCreateZone = "/api.console.resource.Zone/CreateZone"
const OperationZoneDeleteZone = "/api.console.resource.Zone/DeleteZone"
const OperationZoneDisableZone = "/api.console.resource.Zone/DisableZone"
const OperationZoneGetZone = "/api.console.resource.Zone/GetZone"
const OperationZoneGetZoneList = "/api.console.resource.Zone/GetZoneList"
const OperationZoneUpdateZone = "/api.console.resource.Zone/UpdateZone"

type ZoneHTTPServer interface {
	// CreateZone CreateZone creates a new zone.
	//
	// ...
	CreateZone(context.Context, *CreateZoneRequest) (*CreateZoneReply, error)
	// DeleteZone DeleteZone deletes the zone.
	//
	// ...
	DeleteZone(context.Context, *DeleteZoneRequest) (*DeleteZoneReply, error)
	// DisableZone DisableZone disables the zone.
	//
	// ...
	DisableZone(context.Context, *DisableZoneRequest) (*DisableZoneReply, error)
	// GetZone GetZone returns the zone.
	//
	// Query parameter "id" is required.
	// Example: /api/console/zone/1
	GetZone(context.Context, *GetZoneRequest) (*GetZoneReply, error)
	// GetZoneList GetZoneList returns a list of zones.
	//
	// The list is sorted by zone id.
	GetZoneList(context.Context, *GetZoneListRequest) (*GetZoneListReply, error)
	// UpdateZone UpdateZone updates the zone.
	//
	// ...
	UpdateZone(context.Context, *UpdateZoneRequest) (*UpdateZoneReply, error)
}

func RegisterZoneHTTPServer(s *http.Server, srv ZoneHTTPServer) {
	r := s.Route("/")
	r.GET("/api/console/zone", _Zone_GetZoneList0_HTTP_Handler(srv))
	r.GET("/api/console/zone/{id}", _Zone_GetZone0_HTTP_Handler(srv))
	r.POST("/api/console/zone", _Zone_CreateZone0_HTTP_Handler(srv))
	r.PUT("/api/console/zone/{id}", _Zone_UpdateZone0_HTTP_Handler(srv))
	r.POST("/api/console/zone/{id}/disable", _Zone_DisableZone0_HTTP_Handler(srv))
	r.DELETE("/api/console/zone/{id}", _Zone_DeleteZone0_HTTP_Handler(srv))
}

func _Zone_GetZoneList0_HTTP_Handler(srv ZoneHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetZoneListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationZoneGetZoneList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetZoneList(ctx, req.(*GetZoneListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetZoneListReply)
		return ctx.Result(200, reply)
	}
}

func _Zone_GetZone0_HTTP_Handler(srv ZoneHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetZoneRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationZoneGetZone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetZone(ctx, req.(*GetZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetZoneReply)
		return ctx.Result(200, reply)
	}
}

func _Zone_CreateZone0_HTTP_Handler(srv ZoneHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateZoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationZoneCreateZone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateZone(ctx, req.(*CreateZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateZoneReply)
		return ctx.Result(200, reply)
	}
}

func _Zone_UpdateZone0_HTTP_Handler(srv ZoneHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateZoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationZoneUpdateZone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateZone(ctx, req.(*UpdateZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateZoneReply)
		return ctx.Result(200, reply)
	}
}

func _Zone_DisableZone0_HTTP_Handler(srv ZoneHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisableZoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationZoneDisableZone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisableZone(ctx, req.(*DisableZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DisableZoneReply)
		return ctx.Result(200, reply)
	}
}

func _Zone_DeleteZone0_HTTP_Handler(srv ZoneHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteZoneRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationZoneDeleteZone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteZone(ctx, req.(*DeleteZoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteZoneReply)
		return ctx.Result(200, reply)
	}
}

type ZoneHTTPClient interface {
	CreateZone(ctx context.Context, req *CreateZoneRequest, opts ...http.CallOption) (rsp *CreateZoneReply, err error)
	DeleteZone(ctx context.Context, req *DeleteZoneRequest, opts ...http.CallOption) (rsp *DeleteZoneReply, err error)
	DisableZone(ctx context.Context, req *DisableZoneRequest, opts ...http.CallOption) (rsp *DisableZoneReply, err error)
	GetZone(ctx context.Context, req *GetZoneRequest, opts ...http.CallOption) (rsp *GetZoneReply, err error)
	GetZoneList(ctx context.Context, req *GetZoneListRequest, opts ...http.CallOption) (rsp *GetZoneListReply, err error)
	UpdateZone(ctx context.Context, req *UpdateZoneRequest, opts ...http.CallOption) (rsp *UpdateZoneReply, err error)
}

type ZoneHTTPClientImpl struct {
	cc *http.Client
}

func NewZoneHTTPClient(client *http.Client) ZoneHTTPClient {
	return &ZoneHTTPClientImpl{client}
}

func (c *ZoneHTTPClientImpl) CreateZone(ctx context.Context, in *CreateZoneRequest, opts ...http.CallOption) (*CreateZoneReply, error) {
	var out CreateZoneReply
	pattern := "/api/console/zone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationZoneCreateZone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ZoneHTTPClientImpl) DeleteZone(ctx context.Context, in *DeleteZoneRequest, opts ...http.CallOption) (*DeleteZoneReply, error) {
	var out DeleteZoneReply
	pattern := "/api/console/zone/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationZoneDeleteZone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ZoneHTTPClientImpl) DisableZone(ctx context.Context, in *DisableZoneRequest, opts ...http.CallOption) (*DisableZoneReply, error) {
	var out DisableZoneReply
	pattern := "/api/console/zone/{id}/disable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationZoneDisableZone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ZoneHTTPClientImpl) GetZone(ctx context.Context, in *GetZoneRequest, opts ...http.CallOption) (*GetZoneReply, error) {
	var out GetZoneReply
	pattern := "/api/console/zone/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationZoneGetZone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ZoneHTTPClientImpl) GetZoneList(ctx context.Context, in *GetZoneListRequest, opts ...http.CallOption) (*GetZoneListReply, error) {
	var out GetZoneListReply
	pattern := "/api/console/zone"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationZoneGetZoneList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ZoneHTTPClientImpl) UpdateZone(ctx context.Context, in *UpdateZoneRequest, opts ...http.CallOption) (*UpdateZoneReply, error) {
	var out UpdateZoneReply
	pattern := "/api/console/zone/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationZoneUpdateZone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
