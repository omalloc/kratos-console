// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.2
// source: console/resource/node.proto

package resource

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNodeList = "/api.console.resource.Node/List"

type NodeHTTPServer interface {
	List(context.Context, *NodeListRequest) (*NodeListReply, error)
}

func RegisterNodeHTTPServer(s *http.Server, srv NodeHTTPServer) {
	r := s.Route("/")
	r.GET("/api/console/node", _Node_List1_HTTP_Handler(srv))
}

func _Node_List1_HTTP_Handler(srv NodeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NodeListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNodeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*NodeListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NodeListReply)
		return ctx.Result(200, reply)
	}
}

type NodeHTTPClient interface {
	List(ctx context.Context, req *NodeListRequest, opts ...http.CallOption) (rsp *NodeListReply, err error)
}

type NodeHTTPClientImpl struct {
	cc *http.Client
}

func NewNodeHTTPClient(client *http.Client) NodeHTTPClient {
	return &NodeHTTPClientImpl{client}
}

func (c *NodeHTTPClientImpl) List(ctx context.Context, in *NodeListRequest, opts ...http.CallOption) (*NodeListReply, error) {
	var out NodeListReply
	pattern := "/api/console/node"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNodeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
