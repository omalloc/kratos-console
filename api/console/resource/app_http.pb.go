// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.25.2
// source: console/resource/app.proto

package resource

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppCreate = "/api.console.resource.App/Create"
const OperationAppDelete = "/api.console.resource.App/Delete"
const OperationAppGet = "/api.console.resource.App/Get"
const OperationAppList = "/api.console.resource.App/List"
const OperationAppNamespaceAppList = "/api.console.resource.App/NamespaceAppList"
const OperationAppUpdate = "/api.console.resource.App/Update"

type AppHTTPServer interface {
	Create(context.Context, *AppCreateRequest) (*AppCreateReply, error)
	Delete(context.Context, *AppDeleteRequest) (*AppDeleteReply, error)
	Get(context.Context, *AppGetRequest) (*AppGetReply, error)
	List(context.Context, *AppListRequest) (*AppListReply, error)
	NamespaceAppList(context.Context, *NamespaceAppListRequest) (*NamespaceAppListReply, error)
	Update(context.Context, *AppUpdateRequest) (*AppUpdateReply, error)
}

func RegisterAppHTTPServer(s *http.Server, srv AppHTTPServer) {
	r := s.Route("/")
	r.GET("/api/console/app", _App_List2_HTTP_Handler(srv))
	r.GET("/api/console/app/-/metas", _App_NamespaceAppList0_HTTP_Handler(srv))
	r.GET("/api/console/app/{id}", _App_Get2_HTTP_Handler(srv))
	r.POST("/api/console/app", _App_Create2_HTTP_Handler(srv))
	r.PUT("/api/console/app/{id}", _App_Update2_HTTP_Handler(srv))
	r.DELETE("/api/console/app/{id}", _App_Delete2_HTTP_Handler(srv))
}

func _App_List2_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AppListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*AppListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AppListReply)
		return ctx.Result(200, reply)
	}
}

func _App_NamespaceAppList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NamespaceAppListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppNamespaceAppList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.NamespaceAppList(ctx, req.(*NamespaceAppListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NamespaceAppListReply)
		return ctx.Result(200, reply)
	}
}

func _App_Get2_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AppGetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*AppGetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AppGetReply)
		return ctx.Result(200, reply)
	}
}

func _App_Create2_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AppCreateRequest
		if err := ctx.Bind(&in.Data); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*AppCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AppCreateReply)
		return ctx.Result(200, reply)
	}
}

func _App_Update2_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AppUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*AppUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AppUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _App_Delete2_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AppDeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*AppDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AppDeleteReply)
		return ctx.Result(200, reply)
	}
}

type AppHTTPClient interface {
	Create(ctx context.Context, req *AppCreateRequest, opts ...http.CallOption) (rsp *AppCreateReply, err error)
	Delete(ctx context.Context, req *AppDeleteRequest, opts ...http.CallOption) (rsp *AppDeleteReply, err error)
	Get(ctx context.Context, req *AppGetRequest, opts ...http.CallOption) (rsp *AppGetReply, err error)
	List(ctx context.Context, req *AppListRequest, opts ...http.CallOption) (rsp *AppListReply, err error)
	NamespaceAppList(ctx context.Context, req *NamespaceAppListRequest, opts ...http.CallOption) (rsp *NamespaceAppListReply, err error)
	Update(ctx context.Context, req *AppUpdateRequest, opts ...http.CallOption) (rsp *AppUpdateReply, err error)
}

type AppHTTPClientImpl struct {
	cc *http.Client
}

func NewAppHTTPClient(client *http.Client) AppHTTPClient {
	return &AppHTTPClientImpl{client}
}

func (c *AppHTTPClientImpl) Create(ctx context.Context, in *AppCreateRequest, opts ...http.CallOption) (*AppCreateReply, error) {
	var out AppCreateReply
	pattern := "/api/console/app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Data, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) Delete(ctx context.Context, in *AppDeleteRequest, opts ...http.CallOption) (*AppDeleteReply, error) {
	var out AppDeleteReply
	pattern := "/api/console/app/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) Get(ctx context.Context, in *AppGetRequest, opts ...http.CallOption) (*AppGetReply, error) {
	var out AppGetReply
	pattern := "/api/console/app/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) List(ctx context.Context, in *AppListRequest, opts ...http.CallOption) (*AppListReply, error) {
	var out AppListReply
	pattern := "/api/console/app"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) NamespaceAppList(ctx context.Context, in *NamespaceAppListRequest, opts ...http.CallOption) (*NamespaceAppListReply, error) {
	var out NamespaceAppListReply
	pattern := "/api/console/app/-/metas"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppNamespaceAppList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppHTTPClientImpl) Update(ctx context.Context, in *AppUpdateRequest, opts ...http.CallOption) (*AppUpdateReply, error) {
	var out AppUpdateReply
	pattern := "/api/console/app/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
