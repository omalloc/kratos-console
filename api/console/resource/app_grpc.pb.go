// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: console/resource/app.proto

package resource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	App_List_FullMethodName             = "/api.console.resource.App/List"
	App_NamespaceAppList_FullMethodName = "/api.console.resource.App/NamespaceAppList"
	App_Get_FullMethodName              = "/api.console.resource.App/Get"
	App_Create_FullMethodName           = "/api.console.resource.App/Create"
	App_Update_FullMethodName           = "/api.console.resource.App/Update"
	App_Delete_FullMethodName           = "/api.console.resource.App/Delete"
)

// AppClient is the client API for App service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppClient interface {
	List(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppListReply, error)
	NamespaceAppList(ctx context.Context, in *NamespaceAppListRequest, opts ...grpc.CallOption) (*NamespaceAppListReply, error)
	Get(ctx context.Context, in *AppGetRequest, opts ...grpc.CallOption) (*AppGetReply, error)
	Create(ctx context.Context, in *AppCreateRequest, opts ...grpc.CallOption) (*AppCreateReply, error)
	Update(ctx context.Context, in *AppUpdateRequest, opts ...grpc.CallOption) (*AppUpdateReply, error)
	Delete(ctx context.Context, in *AppDeleteRequest, opts ...grpc.CallOption) (*AppDeleteReply, error)
}

type appClient struct {
	cc grpc.ClientConnInterface
}

func NewAppClient(cc grpc.ClientConnInterface) AppClient {
	return &appClient{cc}
}

func (c *appClient) List(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppListReply)
	err := c.cc.Invoke(ctx, App_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) NamespaceAppList(ctx context.Context, in *NamespaceAppListRequest, opts ...grpc.CallOption) (*NamespaceAppListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespaceAppListReply)
	err := c.cc.Invoke(ctx, App_NamespaceAppList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Get(ctx context.Context, in *AppGetRequest, opts ...grpc.CallOption) (*AppGetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppGetReply)
	err := c.cc.Invoke(ctx, App_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Create(ctx context.Context, in *AppCreateRequest, opts ...grpc.CallOption) (*AppCreateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppCreateReply)
	err := c.cc.Invoke(ctx, App_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Update(ctx context.Context, in *AppUpdateRequest, opts ...grpc.CallOption) (*AppUpdateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppUpdateReply)
	err := c.cc.Invoke(ctx, App_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Delete(ctx context.Context, in *AppDeleteRequest, opts ...grpc.CallOption) (*AppDeleteReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppDeleteReply)
	err := c.cc.Invoke(ctx, App_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServer is the server API for App service.
// All implementations must embed UnimplementedAppServer
// for forward compatibility.
type AppServer interface {
	List(context.Context, *AppListRequest) (*AppListReply, error)
	NamespaceAppList(context.Context, *NamespaceAppListRequest) (*NamespaceAppListReply, error)
	Get(context.Context, *AppGetRequest) (*AppGetReply, error)
	Create(context.Context, *AppCreateRequest) (*AppCreateReply, error)
	Update(context.Context, *AppUpdateRequest) (*AppUpdateReply, error)
	Delete(context.Context, *AppDeleteRequest) (*AppDeleteReply, error)
	mustEmbedUnimplementedAppServer()
}

// UnimplementedAppServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppServer struct{}

func (UnimplementedAppServer) List(context.Context, *AppListRequest) (*AppListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAppServer) NamespaceAppList(context.Context, *NamespaceAppListRequest) (*NamespaceAppListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespaceAppList not implemented")
}
func (UnimplementedAppServer) Get(context.Context, *AppGetRequest) (*AppGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAppServer) Create(context.Context, *AppCreateRequest) (*AppCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAppServer) Update(context.Context, *AppUpdateRequest) (*AppUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAppServer) Delete(context.Context, *AppDeleteRequest) (*AppDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAppServer) mustEmbedUnimplementedAppServer() {}
func (UnimplementedAppServer) testEmbeddedByValue()             {}

// UnsafeAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServer will
// result in compilation errors.
type UnsafeAppServer interface {
	mustEmbedUnimplementedAppServer()
}

func RegisterAppServer(s grpc.ServiceRegistrar, srv AppServer) {
	// If the following call pancis, it indicates UnimplementedAppServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&App_ServiceDesc, srv)
}

func _App_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).List(ctx, req.(*AppListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_NamespaceAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceAppListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).NamespaceAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_NamespaceAppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).NamespaceAppList(ctx, req.(*NamespaceAppListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Get(ctx, req.(*AppGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Create(ctx, req.(*AppCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Update(ctx, req.(*AppUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: App_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Delete(ctx, req.(*AppDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// App_ServiceDesc is the grpc.ServiceDesc for App service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var App_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.console.resource.App",
	HandlerType: (*AppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _App_List_Handler,
		},
		{
			MethodName: "NamespaceAppList",
			Handler:    _App_NamespaceAppList_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _App_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _App_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _App_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _App_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "console/resource/app.proto",
}
