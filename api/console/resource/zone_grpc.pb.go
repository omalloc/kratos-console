// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: console/resource/zone.proto

package resource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Zone_List_FullMethodName       = "/api.console.resource.Zone/List"
	Zone_SimpleList_FullMethodName = "/api.console.resource.Zone/SimpleList"
	Zone_Get_FullMethodName        = "/api.console.resource.Zone/Get"
	Zone_Create_FullMethodName     = "/api.console.resource.Zone/Create"
	Zone_Update_FullMethodName     = "/api.console.resource.Zone/Update"
	Zone_Disable_FullMethodName    = "/api.console.resource.Zone/Disable"
	Zone_Delete_FullMethodName     = "/api.console.resource.Zone/Delete"
)

// ZoneClient is the client API for Zone service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZoneClient interface {
	// List returns a list of zones.
	//
	// The list is sorted by zone id.
	List(ctx context.Context, in *GetZoneListRequest, opts ...grpc.CallOption) (*GetZoneListReply, error)
	// SimpleList returns a simple-list of zones.
	//
	// The list is sorted by zone create time.
	SimpleList(ctx context.Context, in *SimpleListRequest, opts ...grpc.CallOption) (*SimpleListReply, error)
	// Get returns the zone.
	//
	// Query parameter "id" is required.
	// Example: /api/console/zone/1
	Get(ctx context.Context, in *GetZoneRequest, opts ...grpc.CallOption) (*GetZoneReply, error)
	// Create creates a new zone.
	//
	// ...
	Create(ctx context.Context, in *CreateZoneRequest, opts ...grpc.CallOption) (*CreateZoneReply, error)
	// Update updates the zone.
	//
	// ...
	Update(ctx context.Context, in *UpdateZoneRequest, opts ...grpc.CallOption) (*UpdateZoneReply, error)
	// Disable disables the zone.
	//
	// ...
	Disable(ctx context.Context, in *DisableZoneRequest, opts ...grpc.CallOption) (*DisableZoneReply, error)
	// Delete deletes the zone.
	//
	// ...
	Delete(ctx context.Context, in *DeleteZoneRequest, opts ...grpc.CallOption) (*DeleteZoneReply, error)
}

type zoneClient struct {
	cc grpc.ClientConnInterface
}

func NewZoneClient(cc grpc.ClientConnInterface) ZoneClient {
	return &zoneClient{cc}
}

func (c *zoneClient) List(ctx context.Context, in *GetZoneListRequest, opts ...grpc.CallOption) (*GetZoneListReply, error) {
	out := new(GetZoneListReply)
	err := c.cc.Invoke(ctx, Zone_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneClient) SimpleList(ctx context.Context, in *SimpleListRequest, opts ...grpc.CallOption) (*SimpleListReply, error) {
	out := new(SimpleListReply)
	err := c.cc.Invoke(ctx, Zone_SimpleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneClient) Get(ctx context.Context, in *GetZoneRequest, opts ...grpc.CallOption) (*GetZoneReply, error) {
	out := new(GetZoneReply)
	err := c.cc.Invoke(ctx, Zone_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneClient) Create(ctx context.Context, in *CreateZoneRequest, opts ...grpc.CallOption) (*CreateZoneReply, error) {
	out := new(CreateZoneReply)
	err := c.cc.Invoke(ctx, Zone_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneClient) Update(ctx context.Context, in *UpdateZoneRequest, opts ...grpc.CallOption) (*UpdateZoneReply, error) {
	out := new(UpdateZoneReply)
	err := c.cc.Invoke(ctx, Zone_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneClient) Disable(ctx context.Context, in *DisableZoneRequest, opts ...grpc.CallOption) (*DisableZoneReply, error) {
	out := new(DisableZoneReply)
	err := c.cc.Invoke(ctx, Zone_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneClient) Delete(ctx context.Context, in *DeleteZoneRequest, opts ...grpc.CallOption) (*DeleteZoneReply, error) {
	out := new(DeleteZoneReply)
	err := c.cc.Invoke(ctx, Zone_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZoneServer is the server API for Zone service.
// All implementations must embed UnimplementedZoneServer
// for forward compatibility
type ZoneServer interface {
	// List returns a list of zones.
	//
	// The list is sorted by zone id.
	List(context.Context, *GetZoneListRequest) (*GetZoneListReply, error)
	// SimpleList returns a simple-list of zones.
	//
	// The list is sorted by zone create time.
	SimpleList(context.Context, *SimpleListRequest) (*SimpleListReply, error)
	// Get returns the zone.
	//
	// Query parameter "id" is required.
	// Example: /api/console/zone/1
	Get(context.Context, *GetZoneRequest) (*GetZoneReply, error)
	// Create creates a new zone.
	//
	// ...
	Create(context.Context, *CreateZoneRequest) (*CreateZoneReply, error)
	// Update updates the zone.
	//
	// ...
	Update(context.Context, *UpdateZoneRequest) (*UpdateZoneReply, error)
	// Disable disables the zone.
	//
	// ...
	Disable(context.Context, *DisableZoneRequest) (*DisableZoneReply, error)
	// Delete deletes the zone.
	//
	// ...
	Delete(context.Context, *DeleteZoneRequest) (*DeleteZoneReply, error)
	mustEmbedUnimplementedZoneServer()
}

// UnimplementedZoneServer must be embedded to have forward compatible implementations.
type UnimplementedZoneServer struct {
}

func (UnimplementedZoneServer) List(context.Context, *GetZoneListRequest) (*GetZoneListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedZoneServer) SimpleList(context.Context, *SimpleListRequest) (*SimpleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleList not implemented")
}
func (UnimplementedZoneServer) Get(context.Context, *GetZoneRequest) (*GetZoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedZoneServer) Create(context.Context, *CreateZoneRequest) (*CreateZoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedZoneServer) Update(context.Context, *UpdateZoneRequest) (*UpdateZoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedZoneServer) Disable(context.Context, *DisableZoneRequest) (*DisableZoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedZoneServer) Delete(context.Context, *DeleteZoneRequest) (*DeleteZoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedZoneServer) mustEmbedUnimplementedZoneServer() {}

// UnsafeZoneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZoneServer will
// result in compilation errors.
type UnsafeZoneServer interface {
	mustEmbedUnimplementedZoneServer()
}

func RegisterZoneServer(s grpc.ServiceRegistrar, srv ZoneServer) {
	s.RegisterService(&Zone_ServiceDesc, srv)
}

func _Zone_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetZoneListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zone_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).List(ctx, req.(*GetZoneListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zone_SimpleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).SimpleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zone_SimpleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).SimpleList(ctx, req.(*SimpleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zone_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zone_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).Get(ctx, req.(*GetZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zone_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zone_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).Create(ctx, req.(*CreateZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zone_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zone_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).Update(ctx, req.(*UpdateZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zone_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zone_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).Disable(ctx, req.(*DisableZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zone_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zone_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).Delete(ctx, req.(*DeleteZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Zone_ServiceDesc is the grpc.ServiceDesc for Zone service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zone_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.console.resource.Zone",
	HandlerType: (*ZoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Zone_List_Handler,
		},
		{
			MethodName: "SimpleList",
			Handler:    _Zone_SimpleList_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Zone_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Zone_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Zone_Update_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _Zone_Disable_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Zone_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "console/resource/zone.proto",
}
