// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: console/resource/zone.proto

package resource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Zone_GetZoneList_FullMethodName = "/api.console.resource.Zone/GetZoneList"
	Zone_GetZone_FullMethodName     = "/api.console.resource.Zone/GetZone"
	Zone_CreateZone_FullMethodName  = "/api.console.resource.Zone/CreateZone"
	Zone_UpdateZone_FullMethodName  = "/api.console.resource.Zone/UpdateZone"
	Zone_DisableZone_FullMethodName = "/api.console.resource.Zone/DisableZone"
	Zone_DeleteZone_FullMethodName  = "/api.console.resource.Zone/DeleteZone"
)

// ZoneClient is the client API for Zone service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZoneClient interface {
	// GetZoneList returns a list of zones.
	//
	// The list is sorted by zone id.
	GetZoneList(ctx context.Context, in *GetZoneListRequest, opts ...grpc.CallOption) (*GetZoneListReply, error)
	// GetZone returns the zone.
	//
	// Query parameter "id" is required.
	// Example: /api/console/zone/1
	GetZone(ctx context.Context, in *GetZoneRequest, opts ...grpc.CallOption) (*GetZoneReply, error)
	// CreateZone creates a new zone.
	//
	// ...
	CreateZone(ctx context.Context, in *CreateZoneRequest, opts ...grpc.CallOption) (*CreateZoneReply, error)
	// UpdateZone updates the zone.
	//
	// ...
	UpdateZone(ctx context.Context, in *UpdateZoneRequest, opts ...grpc.CallOption) (*UpdateZoneReply, error)
	// DisableZone disables the zone.
	//
	// ...
	DisableZone(ctx context.Context, in *DisableZoneRequest, opts ...grpc.CallOption) (*DisableZoneReply, error)
	// DeleteZone deletes the zone.
	//
	// ...
	DeleteZone(ctx context.Context, in *DeleteZoneRequest, opts ...grpc.CallOption) (*DeleteZoneReply, error)
}

type zoneClient struct {
	cc grpc.ClientConnInterface
}

func NewZoneClient(cc grpc.ClientConnInterface) ZoneClient {
	return &zoneClient{cc}
}

func (c *zoneClient) GetZoneList(ctx context.Context, in *GetZoneListRequest, opts ...grpc.CallOption) (*GetZoneListReply, error) {
	out := new(GetZoneListReply)
	err := c.cc.Invoke(ctx, Zone_GetZoneList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneClient) GetZone(ctx context.Context, in *GetZoneRequest, opts ...grpc.CallOption) (*GetZoneReply, error) {
	out := new(GetZoneReply)
	err := c.cc.Invoke(ctx, Zone_GetZone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneClient) CreateZone(ctx context.Context, in *CreateZoneRequest, opts ...grpc.CallOption) (*CreateZoneReply, error) {
	out := new(CreateZoneReply)
	err := c.cc.Invoke(ctx, Zone_CreateZone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneClient) UpdateZone(ctx context.Context, in *UpdateZoneRequest, opts ...grpc.CallOption) (*UpdateZoneReply, error) {
	out := new(UpdateZoneReply)
	err := c.cc.Invoke(ctx, Zone_UpdateZone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneClient) DisableZone(ctx context.Context, in *DisableZoneRequest, opts ...grpc.CallOption) (*DisableZoneReply, error) {
	out := new(DisableZoneReply)
	err := c.cc.Invoke(ctx, Zone_DisableZone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneClient) DeleteZone(ctx context.Context, in *DeleteZoneRequest, opts ...grpc.CallOption) (*DeleteZoneReply, error) {
	out := new(DeleteZoneReply)
	err := c.cc.Invoke(ctx, Zone_DeleteZone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZoneServer is the server API for Zone service.
// All implementations must embed UnimplementedZoneServer
// for forward compatibility
type ZoneServer interface {
	// GetZoneList returns a list of zones.
	//
	// The list is sorted by zone id.
	GetZoneList(context.Context, *GetZoneListRequest) (*GetZoneListReply, error)
	// GetZone returns the zone.
	//
	// Query parameter "id" is required.
	// Example: /api/console/zone/1
	GetZone(context.Context, *GetZoneRequest) (*GetZoneReply, error)
	// CreateZone creates a new zone.
	//
	// ...
	CreateZone(context.Context, *CreateZoneRequest) (*CreateZoneReply, error)
	// UpdateZone updates the zone.
	//
	// ...
	UpdateZone(context.Context, *UpdateZoneRequest) (*UpdateZoneReply, error)
	// DisableZone disables the zone.
	//
	// ...
	DisableZone(context.Context, *DisableZoneRequest) (*DisableZoneReply, error)
	// DeleteZone deletes the zone.
	//
	// ...
	DeleteZone(context.Context, *DeleteZoneRequest) (*DeleteZoneReply, error)
	mustEmbedUnimplementedZoneServer()
}

// UnimplementedZoneServer must be embedded to have forward compatible implementations.
type UnimplementedZoneServer struct {
}

func (UnimplementedZoneServer) GetZoneList(context.Context, *GetZoneListRequest) (*GetZoneListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZoneList not implemented")
}
func (UnimplementedZoneServer) GetZone(context.Context, *GetZoneRequest) (*GetZoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZone not implemented")
}
func (UnimplementedZoneServer) CreateZone(context.Context, *CreateZoneRequest) (*CreateZoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZone not implemented")
}
func (UnimplementedZoneServer) UpdateZone(context.Context, *UpdateZoneRequest) (*UpdateZoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateZone not implemented")
}
func (UnimplementedZoneServer) DisableZone(context.Context, *DisableZoneRequest) (*DisableZoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableZone not implemented")
}
func (UnimplementedZoneServer) DeleteZone(context.Context, *DeleteZoneRequest) (*DeleteZoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteZone not implemented")
}
func (UnimplementedZoneServer) mustEmbedUnimplementedZoneServer() {}

// UnsafeZoneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZoneServer will
// result in compilation errors.
type UnsafeZoneServer interface {
	mustEmbedUnimplementedZoneServer()
}

func RegisterZoneServer(s grpc.ServiceRegistrar, srv ZoneServer) {
	s.RegisterService(&Zone_ServiceDesc, srv)
}

func _Zone_GetZoneList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetZoneListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).GetZoneList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zone_GetZoneList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).GetZoneList(ctx, req.(*GetZoneListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zone_GetZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).GetZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zone_GetZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).GetZone(ctx, req.(*GetZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zone_CreateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).CreateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zone_CreateZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).CreateZone(ctx, req.(*CreateZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zone_UpdateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).UpdateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zone_UpdateZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).UpdateZone(ctx, req.(*UpdateZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zone_DisableZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).DisableZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zone_DisableZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).DisableZone(ctx, req.(*DisableZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zone_DeleteZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneServer).DeleteZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zone_DeleteZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneServer).DeleteZone(ctx, req.(*DeleteZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Zone_ServiceDesc is the grpc.ServiceDesc for Zone service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zone_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.console.resource.Zone",
	HandlerType: (*ZoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetZoneList",
			Handler:    _Zone_GetZoneList_Handler,
		},
		{
			MethodName: "GetZone",
			Handler:    _Zone_GetZone_Handler,
		},
		{
			MethodName: "CreateZone",
			Handler:    _Zone_CreateZone_Handler,
		},
		{
			MethodName: "UpdateZone",
			Handler:    _Zone_UpdateZone_Handler,
		},
		{
			MethodName: "DisableZone",
			Handler:    _Zone_DisableZone_Handler,
		},
		{
			MethodName: "DeleteZone",
			Handler:    _Zone_DeleteZone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "console/resource/zone.proto",
}
