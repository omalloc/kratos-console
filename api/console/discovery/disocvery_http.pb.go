// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.4
// source: console/discovery/disocvery.proto

package discovery

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDiscoveryOnlineServices = "/api.console.discovery.Discovery/OnlineServices"

type DiscoveryHTTPServer interface {
	OnlineServices(context.Context, *OnlineServiceRequest) (*OnlineServiceReply, error)
}

func RegisterDiscoveryHTTPServer(s *http.Server, srv DiscoveryHTTPServer) {
	r := s.Route("/")
	r.GET("/api/console/discovery/services/-/online", _Discovery_OnlineServices0_HTTP_Handler(srv))
}

func _Discovery_OnlineServices0_HTTP_Handler(srv DiscoveryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OnlineServiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDiscoveryOnlineServices)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnlineServices(ctx, req.(*OnlineServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OnlineServiceReply)
		return ctx.Result(200, reply)
	}
}

type DiscoveryHTTPClient interface {
	OnlineServices(ctx context.Context, req *OnlineServiceRequest, opts ...http.CallOption) (rsp *OnlineServiceReply, err error)
}

type DiscoveryHTTPClientImpl struct {
	cc *http.Client
}

func NewDiscoveryHTTPClient(client *http.Client) DiscoveryHTTPClient {
	return &DiscoveryHTTPClientImpl{client}
}

func (c *DiscoveryHTTPClientImpl) OnlineServices(ctx context.Context, in *OnlineServiceRequest, opts ...http.CallOption) (*OnlineServiceReply, error) {
	var out OnlineServiceReply
	pattern := "/api/console/discovery/services/-/online"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDiscoveryOnlineServices))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
