syntax = "proto3";

package api.console.discovery;

option go_package = "github.com/omalloc/kratos-console/api/console/discovery;discovery";
option java_multiple_files = true;
option java_package = "api.console.discovery";

import "google/api/annotations.proto";
import "protobuf/pagination.proto";

service Discovery {
	rpc OnlineServices (OnlineServiceRequest) returns (OnlineServiceReply) {
		option (google.api.http).get = "/api/console/discovery/services/-/online";
	};

	rpc KVListClusters (KVListClustersRequest) returns (KVListClustersReply) {
		option (google.api.http).get = "/api/console/kv/clusters";
	};

	rpc KVListKeys (KVListKeysRequest) returns (KVListKeysReply) {
		option (google.api.http).get = "/api/console/kv/keys";
	};

	rpc KVGetValue (KVGetValueRequest) returns (KVGetValueReply) {
		option (google.api.http).get = "/api/console/kv/-/value";
	};

	rpc KVUpdateHang (KVUpdateHangRequest) returns (KVUpdateHangReply) {
		option (google.api.http) = {
			put: "/api/console/kv/{id}/hang"
			body: "*"
		};
	};

}

message Service {
	int64 id = 1;
	// 唯一标识
	string key = 2;
	// 主机名
	string hostname = 3;
	// 服务名称
	string name = 4;
	// 版本
	string version = 5;
	// 服务地址
	repeated string endpoints = 6;
	// 集群
	string cluster = 7;
	// 挂起状态 true 为挂起
	bool hang = 8;
	// 元信息
	map<string, string> metadata = 9;
	// 命名空间
	string namespace = 10;
	// 上次心跳间隔
	int32 last_healthy_sec = 11;
}

message ServiceGroup {
	// 唯一标识
	string key = 1;
	// 主机名
	string hostname = 2;
	// 服务名称
	string name = 3;
	// 版本
	string version = 4;
	// 服务地址
	repeated string endpoints = 5;
	// 集群
	repeated string clusters = 6;
  // 同服务，不同实例的数组信息
	repeated Service children = 7;
	// 命名空间
	string namespace = 8;
	// 数据类型
	bool is_group = 9;
}

message OnlineServiceRequest {
	// pagination filter
	protobuf.Pagination pagination = 1;
	// service name
	string name = 2;
	// service namespace
	string namespace = 3;
}
message OnlineServiceReply {
		protobuf.Pagination pagination = 1;
		repeated ServiceGroup data = 2;
};

message KVListClustersRequest {}
message KVListClustersReply {
	repeated string clusters = 1;
}

message KVListKeysRequest {
	string cluster = 1;
}
message KVListKeysReply {
	repeated string keys = 1;
}

message KVGetValueRequest {
	string key = 1;
	string cluster = 2;
}
message KVGetValueReply {
	string value = 1;
}

message KVUpdateHangRequest {
	// 主键
	int64 id = 1;
	// 挂起状态 true 为挂起1111
	bool hang = 2;
}

message KVUpdateHangReply {}