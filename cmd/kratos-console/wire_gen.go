// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/omalloc/contrib/kratos/health"
	"github.com/omalloc/contrib/kratos/registry"
	"github.com/omalloc/kratos-console/internal/biz"
	"github.com/omalloc/kratos-console/internal/conf"
	"github.com/omalloc/kratos-console/internal/data"
	"github.com/omalloc/kratos-console/internal/discovery"
	"github.com/omalloc/kratos-console/internal/server"
	"github.com/omalloc/kratos-console/internal/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	protobufRegistry := server.NewRegistryConfig(bootstrap)
	client, cleanup, err := registry.NewEtcd(protobufRegistry)
	if err != nil {
		return nil, nil, err
	}
	registrar := registry.NewRegistrar(client, protobufRegistry)
	dataData, cleanup2, err := data.NewData(confData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	zoneRepo := data.NewZoneRepo(dataData)
	zoneUsecase := biz.NewZoneUsecase(zoneRepo, logger)
	zoneService := service.NewZoneService(logger, zoneUsecase)
	nodeRepo := data.NewNodeRepo(dataData)
	nodeUsecase := biz.NewNodeUsecase(logger, nodeRepo)
	nodeService := service.NewNodeService(logger, nodeUsecase)
	appRepo := data.NewAppRepo(dataData)
	appUsecase := biz.NewAppUsecase(logger, appRepo)
	appService := service.NewAppService(logger, appUsecase)
	namespaceRepo := data.NewNamespaceRepo(logger, dataData)
	namespaceUsecase := biz.NewNamespaceUsecase(logger, namespaceRepo)
	namespaceService := service.NewNamespaceService(logger, namespaceUsecase)
	registryDiscovery := registry.NewDiscovery(client, protobufRegistry)
	agentClient, err := discovery.NewAgentService(logger, registryDiscovery)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	discoveryService := service.NewDiscoveryService(logger, agentClient)
	grpcServer := server.NewGRPCServer(confServer, logger, zoneService, nodeService, appService, namespaceService, discoveryService)
	httpServer := server.NewHTTPServer(confServer, logger, zoneService, nodeService, appService, namespaceService, discoveryService)
	v := server.NewChecker(dataData, client)
	healthServer := health.NewServer(v, logger, httpServer)
	app := newApp(logger, registrar, grpcServer, httpServer, healthServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
